#!/gearlock/bin/bash
mount -o rw,remount / 2>/dev/null
VERSION="1.4"

# Runtime Functions
function play_bootsound() {
	test -n "$BOOTSOUND" && test -e "$BOOTSOUND" \
		&& alsa_aplay "$BOOTSOUND" </dev/null &>/dev/null & disown
}

function check_app() {
	! grep -q "$GAPPID" '/data/system/packages.list' 2>/dev/null \
		&& pm install "$GRLBASE/share/gearlock/app.apk" > /dev/null 2>&1
	return 0
}

function make_bashls() {
	test -e "${mk:="/gearlock/tmp/.mkbashls"}" && test ! -e "${lk:="/gearlock/tmp/.bashls"}" \
		&& touch "$lk" && rm "$mk" && openvt -c $1 gbash -l && setfont "$GRLBASE/share/terminfo/c/cons16-asm" -C /dev/tty$1 \
			&& setterm --linewrap on > /dev/tty$1
}

function bind_grload() {
	if ! mountpoint -q "/mnt/gearload"; then
		ckdirex "/mnt/gearload" 777
		mount --bind "$GRROOT/gearload" "/mnt/gearload"
	fi
}

function chmod_mnt() {
	chmod 777 "$GRROOT_DIR" && test -d "/mnt/runtime" && chmod 777 "/mnt/runtime"
	test -e "/mnt/runtime/default" && grep -qiE 'phoenix.*version|phoenix.*os' && {
		test -z "$(find "/mnt/runtime/default" -maxdepth 0 -empty)" && chmod -f 777 /mnt/runtime/default/*
	}
}

function hook_boot() {
	export GBRUNTIME="yes" && source /gearlock/bin/fetch || exit
}

function do_zygote_job() {
	chmod -f 755 /system/*bin /system/*bin/su /sbin/su >/dev/null 2>&1
	hook_boot
	test "$SECOND_GTTY" != "no" && touch "$GTMP/.mkbashls"
	for _dir in "init" "post-fs" "post-fs-data" "boot-post" "boot-comp"; do
		mkdir -p "$GBDIR/$_dir" >/dev/null 2>&1
	done
	mkdir -p "$OVERLAYDIR"
	chmod -f 755 "$GBDIR/"* "$OVERLAYDIR" "$OVERLAYDIR/"* >/dev/null 2>&1
}

function loadFromFs.create() {
	if test "$LOAD_FROMFS" == "yes" && test -n "$RECOVERY"; then
		touch -c "$LOAD_FROMFS_ROOT" 2>/dev/null && {
			test "$GEARLOCK_VER" != "$(cat "$LOAD_FROMFS_ROOT/core/version" 2>/dev/null)" && {
				echo -e "==== Creating ${FUNCNAME%.create} instance: \c"
				(
					rm -rf "$LOAD_FROMFS_ROOT"
					cd "$SYSTEM_DIR/usr" || return 1
					cpio -iudF "$GRROOT/gearlock"
					mv "$SYSTEM_DIR/usr/gearlock" "$LOAD_FROMFS_ROOT"
				)
			}
		}
	else
		rm -rf "$LOAD_FROMFS_ROOT"
	fi
}

function overlay.set() {
	local LOG_FILE="$GTMP/gearboot.overlay.log"
	readarray -d '' WORKDIR_LIST < <(find "$OVERLAYDIR" -mindepth 1 -maxdepth 2 -type d -name "$GBSTAGE" -print0)
	
	for WORKDIR in "${WORKDIR_LIST[@]}"; do
		local ROOT="$(test "$GBSTAGE" == "init" && echo '/android')"
		if test -z "$(find "$WORKDIR" -maxdepth 0 -empty)"; then
		
			# Read both empty dir and files to process
			readarray -d '' overlay_empty_dirs < <(find "$WORKDIR" -type d -empty -print0)
			readarray -d '' overlay_files < <(find "$WORKDIR" -mindepth 1 -type f -print0)
			
			# Lets start with empty dirs to process
			for empty_dir in "${overlay_empty_dirs[@]}"; do
				local local_dir="${ROOT}${empty_dir##$WORKDIR}"
				local empty_dir="${ROOT}${empty_dir}"
				{ grep -q "$local_dir" "$LOG_FILE" && mount | grep -q "on $local_dir" \
					&& { umount -fd "$local_dir" || umount -fld "$local_dir"; }
				} 2>/dev/null
				test -e "$local_dir" && mount --bind "$empty_dir" "$local_dir" && echo -e "$local_dir" >> "$LOG_FILE"
			done
			
			# Now lets deal with file type instead
			for file_type in "${overlay_files[@]}"; do
				local local_file="${ROOT}${file_type##$WORKDIR}"
				local file_type="${ROOT}${file_type}"
				{ grep -q "$local_file" "$LOG_FILE" && mount | grep -q "on $local_file" \
					&& { umount -fd "$local_file" || umount -fld "$local_file"; }
				} 2>/dev/null
				test -e "$local_file" && mount --bind "$file_type" "$local_file" && echo -e "$local_file" >> "$LOG_FILE"
			done
		
		fi
	done
}

# FIXME: Guess we need to do something with it ?
# function overlay.unset() {
# 	
# }

function gbjob() {
	export GBSTAGE="$1"
	local LOG_FILE="$GTMP/gearboot.log"
	
	# Initialize overlays
	overlay.set
	
	# Run boot executables
	if test -d "$GBDIR/init" && test -d "$GBDIR/post-fs" && test -d "$GBDIR/post-fs-data" && test -d "$GBDIR/boot-post" && test -d "$GBDIR/boot-comp"; then
		if test -n "$GBSTAGE" && test -z "$(find "$GBDIR/$1" -maxdepth 0 -empty)"; then
			cd "$GBDIR/$1" || return 1
			test "$1" == "init" && echo -e "\n++ Running GearBoot init executables ...\n"
			if test ! -e "$GTMP/gearboot.log"; then
				echo -e "# Start of $1 stage @ $(date)" > "$LOG_FILE"
			else
				echo -e "\n\n\n# Start of $1 stage @ $(date)" >> "$LOG_FILE"
			fi
			shopt -s globstar
			for f in **/*; do
				if test -f "$f"; then
					echo "  $(date '+%T:%N')  :  $GBSTAGE  :  $f" >> "$GTMP/gearboot.log" && chmod 755 "$f"
					if test "$GBSTAGE" == "init"; then
						echo -e "\n===== $f" && "$GBDIR/$GBSTAGE/$f"
					elif [[ "$GBSTAGE" =~ .*post-fs.* ]]; then
						echo -e "\n===== $f ___(${GBSTAGE})___" >> "${LOG_FILE/.log/.raw.log}"
						"$GBDIR/$GBSTAGE/$f" >> "${LOG_FILE/.log/.raw.log}" 2>&1
					else
						echo -e "\n===== $f ___(${GBSTAGE})___" >> "${LOG_FILE/.log/.raw.log}"
						"$GBDIR/$GBSTAGE/$f" >> "${LOG_FILE/.log/.raw.log}" 2>&1 & disown
					fi
				fi
			done
			shopt -u globstar
		fi
	fi
}

function write_gblog() {
	local PATH="/gearlock/bin"
	SL="$(grep -nA500 "# Start of $GBSTAGE stage" "$GTMP/gearboot.log" | grep "$(basename "$0")" | head -n1)"
	sed -i "$(echo "$SL" | cut -d "-" -f1)s/.*/ $(echo "$SL" | cut -d " " -f2-)  :  $@/" "$GTMP/gearboot.log"
}; export -f write_gblog

case "$1" in
	s0)
		test -n "$RECOVERY" && {
			do_zygote_job
			loadFromFs.create
			gbjob init
		}
		;;
	s1)
		hook_boot
		gbjob post-fs
		;;
	s2)
		hook_boot
		gbjob post-fs-data
		;;
	s3)
		make_bashls 8
		hook_boot
		gbjob boot-post
		;;
	s4)
		hook_boot
		play_bootsound
		bind_grload
		gbjob boot-comp
		chmod_mnt
		touch "$GTMP/boot-comp"
		check_app
		;;
	-h|--help) echo -e "
GearBoot $VERSION | Copyright (c) $(date '+%Y') AXON | supreme-gamers.com
GearBoot is a very simple program which run executables during boot dynamically

Usage:    gearboot <boot-stage>

Examples: gearboot s2        # For running executables in post-fs-data stage
          gearboot s4        # For running executables in boot-comp stage

<Boot-Stages>

     s1 : post-fs
     s2 : post-fs-data
     s3 : boot-post
     s4 : boot-comp
  
Informative output:

     -v,  --version      Print GearBoot version
     -h,  --help         Print this help message

The logging file is /gearlock/tmp/gearboot.log

GearBoot is a part of GearLock. Init stage is not available for manual triggering
GearBoot auto runs during boot, you may only manually trigger it for reloading purposes
For more information & bugreports visit https://supreme-gamers.com/gearlock"
		;;
	-v|--version)
		echo "$VERSION"
		;;
*)
	echo "gearboot: No boot-stage specified.
You must specify one of s1|2|3|4 stage.

Try \`gearboot -h' or \`gearboot --help' for more information."
		;;
esac
